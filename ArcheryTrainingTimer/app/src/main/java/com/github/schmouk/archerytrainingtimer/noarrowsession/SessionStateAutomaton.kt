/*
MIT License

Copyright (c) 2025 Philippe Schmouker, ph (dot) schmouker (at) gmail (dot) com

This file is part of Android application ArcheryTrainingTimer.

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction,  including without limitation the  rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

package com.github.schmouk.archerytrainingtimer.noarrowsession

import com.github.schmouk.archerytrainingtimer.commons.ESignal
import com.github.schmouk.archerytrainingtimer.commons.EState
import com.github.schmouk.archerytrainingtimer.commons.BaseSessionStateAutomaton


/**
 * Manages the state of the timer based on input signals.
 * Specialized for No-Arrows sessions.
 */
open class SessionStateAutomaton : BaseSessionStateAutomaton() {

    /**
     * Processes an incoming signal generated by a user action and transitions the internal state accordingly.
     *
     * @param signal The ESignal to process, relates to the user or to the view actions.
     */
    override fun action(signal: ESignal) {
        when (currentState) {
            EState.STATE_IDLE, EState.STATE_COMPLETED -> {
                when (signal) {
                    ESignal.SIG_PREPARE -> {
                        // This is the only action that makes sense from IDLE state
                        // related with the finite state automaton associated with
                        // the training session timer:
                        // The session is under preparation step, after what the timer will start countdown
                        currentState = EState.STATE_PREPARATION
                    }
                    else -> {
                        // In IDLE or COMPLETED state, STOP, REST_ON, REST_OFF or
                        // COMPLETED signals can never happen. No state change occurs.
                    }
                }
            }
            EState.STATE_PREPARATION -> {
                when (signal) {
                    ESignal.SIG_START -> {
                        // The preparation countdown has completed,
                        // and the main timer should start now.
                        currentState = EState.STATE_TIMER_RUNNING
                    }
                    else -> {
                        // In PREPARATION state, STOP, REST_ON, REST_OFF or
                        // COMPLETED signals can never happen. No state change occurs.
                    }
                }
            }
            EState.STATE_TIMER_RUNNING -> {
                when (signal) {
                    ESignal.SIG_STOP -> {
                        // User has paused the main timer
                        // Transition to TIMER_STOPPED state
                        currentState = EState.STATE_TIMER_STOPPED
                    }
                    ESignal.SIG_REST_ON -> {
                        // Typically, REST follows a completed timer run.
                        currentState = EState.STATE_REST_MODE
                    }
                    ESignal.SIG_COMPLETED -> {
                        // The training session has completed all of its countdowns.
                        currentState = EState.STATE_COMPLETED
                    }
                    else -> {
                        // START and REST_OFF signals in RUNNING state cannot happen.
                        // No state change occurs.
                    }
                }
            }
            EState.STATE_TIMER_STOPPED -> {
                when (signal) {
                    ESignal.SIG_START -> {
                        // This is the only action that makes sense from STOPPED state:
                        // Resume the main timer from where it was paused.
                        currentState = EState.STATE_TIMER_RUNNING
                    }
                    ESignal.SIG_WILL_REST -> {
                        // App has indicated that a rest period is pending.
                        // Transition to WILL_REST state.
                        currentState = EState.STATE_WILL_REST
                    }
                    else -> {
                        // No other type of signal may happen in STOPPED state.
                        // No state change occurs.
                    }
                }
            }
            EState.STATE_REST_MODE -> {
                when (signal) {
                    ESignal.SIG_REST_OFF -> {
                        // This is the only type of signal that can be emitted
                        // by the application while in REST mode state.
                        // It indicates that the rest period has ended,
                        // and the main timer should resume.
                        currentState = EState.STATE_TIMER_RUNNING
                    }
                    ESignal.SIG_COMPLETED -> {
                        // The training session has completed all of its countdowns.
                        currentState = EState.STATE_COMPLETED
                    }
                    else -> {
                        // No other type of signal may happen in REST mode state.
                        // No state change occurs.
                    }
                }
            }
            EState.STATE_WILL_REST -> {
                when (signal) {
                    ESignal.SIG_START -> {
                        // The application has indicated that the rest period should start now.
                        currentState = EState.STATE_REST_MODE
                    }
                    else -> {
                        // No other type of signal may happen in WILL_REST state.
                        // No state change occurs.
                    }
                }
            }
        }
    }

}
