/*
MIT License

Copyright (c) 2025 Philippe Schmouker, ph (dot) schmouker (at) gmail (dot) com

This file is part of Android application ArcheryTrainingTimer.

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction,  including without limitation the  rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

package com.github.schmouk.archerytrainingtimer.commons

/**
 * Defines the signals that can be sent to the NoArrowStateAutomaton-s
 * to trigger state transitions.
 */
enum class ESignal {
    SIG_PREPARE,    // The session is under preparation step, after what the timer will start countdown
    SIG_START,      // The Start button has been tapped
    SIG_STOP,       // The Stop button has been tapped
    SIG_REST_ON,    // The session is entering a rest period
    SIG_REST_OFF,   // The session is exiting a rest period
    SIG_WILL_REST,  // The session is about to enter a rest period - only evaluated when timer is stopped
    SIG_COMPLETED,  // The session has completed
}

/**
 * Defines the internal states of the automaton.
 * This is private as its direct manipulation should be controlled by the automaton.
 */
enum class EState {
    STATE_IDLE,             // Timer is not active, ready to be configured or started
    STATE_PREPARATION,      // Preparation countdown before the main timer starts
    STATE_TIMER_RUNNING,    // Main timer is actively counting down
    STATE_TIMER_STOPPED,    // Main timer was running but is now paused
    STATE_REST_MODE,        // Rest timer is actively counting down
    STATE_WILL_REST,        // Main timer is stopped, and a rest period is pending
    STATE_COMPLETED         // The entire session has completed
}


/**
 * Manages the state of the timer based on input signals.
 */
open class BaseSessionStateAutomaton {

    // Initialize the internal state to IDLE
    protected var currentState: EState = EState.STATE_IDLE


    /**
     * Processes an incoming signal generated by a user action and transitions the internal state accordingly.
     * MUST BE OVERRIDDEN IN INHERITING CLASSES.
     *
     * @param signal The ESignal to process, relates to the user or to the view actions.
     */
    open fun action(signal: ESignal) {
        // Default implementation does nothing.
        // Inheriting classes should provide specific state transition logic.
    }


    // --- Public methods to query the current state ---

    fun isIdleMode(): Boolean = currentState == EState.STATE_IDLE

    fun isPreparationMode(): Boolean = currentState == EState.STATE_PREPARATION

    fun isTimerRunning(): Boolean = currentState == EState.STATE_TIMER_RUNNING

    fun isTimerStopped(): Boolean = currentState == EState.STATE_TIMER_STOPPED ||
            currentState == EState.STATE_WILL_REST

    fun isRestMode(): Boolean = currentState == EState.STATE_REST_MODE

    fun isSessionCompleted(): Boolean = currentState == EState.STATE_COMPLETED

    /**
     * Resets the automaton to its initial idle state.
     * Useful for when the entire timer sequence is reset.
     */
    fun reset() {
        currentState = EState.STATE_IDLE
    }

    /**
     * Provides a string representation of the current internal state.
     * Useful for debugging.
     */
    override fun toString(): String {
        return "noarrowsession.TimerStateAutomaton(currentState=$currentState)"
    }

}
